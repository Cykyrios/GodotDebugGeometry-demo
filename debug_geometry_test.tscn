[gd_scene load_steps=3 format=3 uid="uid://dvuoy133l3hsd"]

[sub_resource type="GDScript" id="GDScript_u5hqw"]
script/source = "extends Node3D


func _ready() -> void:
	DisplayServer.mouse_set_mode(DisplayServer.MOUSE_MODE_CAPTURED)
	draw_stuff()


func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventKey:
		if event.is_pressed():
			if event.keycode == KEY_SPACE:
				spawn_random_shape()


func draw_stuff() -> void:
	DebugGeometry.draw_debug_cube(10, Vector3(-1, 1, -1), 0.9 * Vector3(1, 1, 1), Color(10, 10, 0))

	var grid_pos = Vector3(5, 0, -5)
	var grid_normal = Vector3(-0.2, 1.0, 0.9).normalized()
	var grid_tangent = Vector3(-2.0, 0.8, 1.0).normalized()
	DebugGeometry.draw_debug_line(10, grid_pos, grid_pos + grid_normal, 0, Color(0, 10, 0))
	DebugGeometry.draw_debug_line(10, grid_pos, grid_pos + grid_tangent, 0, Color(0, 0, 10))
	DebugGeometry.draw_debug_grid(10, grid_pos, 10, 5, 20, 10, grid_normal, grid_tangent, Color(5, 5, 5))

	DebugGeometry.draw_debug_grid(10, Vector3(), 10, 10, 10, 10, Vector3.RIGHT, Vector3.BACK, Color(10, 0, 0))
	DebugGeometry.draw_debug_grid(10, Vector3(), 10, 10, 10, 10, Vector3.UP, Vector3.RIGHT, Color(0, 10, 0))
	DebugGeometry.draw_debug_grid(10, Vector3(), 10, 10, 10, 10, Vector3.BACK, Vector3.RIGHT, Color(0, 0, 10))

	DebugGeometry.draw_debug_cylinder(10, Vector3(2, -2, 1), Vector3(3, -1, 2), 1.0, 32, true, Color(5, 0, 5))
	DebugGeometry.draw_debug_cone(10, Vector3(-4, 1, 0), Vector3(-4, 2, -1), 0.2, 0.5, 16, true, Color(0, 2, 0), false)

	DebugGeometry.draw_debug_sphere(10, Vector3(-2, -2, 2), 36, 18, 1.5, Color(0, 2, 2))

	DebugGeometry.draw_debug_line(10, Vector3(2, 1, 0), Vector3(-2, 0, 3), 0.1, Color(0.7, 0.2, 0.1))
	DebugGeometry.draw_debug_coordinate_system(10, Vector3.ZERO, Vector3(1, 0, 0), Vector3(0, 1, 0), 1, 10)
	DebugGeometry.draw_debug_cylinder(10, Vector3(4, 0, -3), Vector3(2, 1, -4), 0.5, 16, true, Color(1, 1, 1), true)
	DebugGeometry.draw_debug_cone(10, Vector3(-3, 1, 0), Vector3(-3, 2, -1), 0.5, 0.2, 16, true, Color(0, 2, 0), true)
	DebugGeometry.draw_debug_arrow(10, Vector3(4, 2, 1), Vector3(1, -3, 2), 2, Color(3, 2, 1))
	DebugGeometry.draw_debug_point(10, Vector3(2, 3, 1), 0.1, Color(0, 0, 0))
	DebugGeometry.draw_debug_coordinate_system(10, Vector3(-4, 0, -3), Vector3(3, 2, 1), Vector3(1, 1, 1), 0.5, 10)


func spawn_random_shape() -> void:
	var random_shape := randi() % 9
	var random_time := randf() * 4 + 1
	match random_shape:
		0:
			DebugGeometry.draw_debug_cube(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					Vector3(randf() * 2, randf() * 2, randf() * 2),
					Color(randf(), randf(), randf()),
					true if randf() > 0.5 else false)
		1:
			DebugGeometry.draw_debug_sphere(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					16, 8, randf() * 2,
					Color(randf(), randf(), randf()),
					true if randf() > 0.5 else false)
		2:
			DebugGeometry.draw_debug_cylinder(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					randf() * 2, 16, true if randf() > 0.5 else false,
					Color(randf(), randf(), randf()),
					true if randf() > 0.5 else false)
		3:
			DebugGeometry.draw_debug_cone(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					randf() * 2, randf() * 2, 16, true if randf() > 0.5 else false,
					Color(randf(), randf(), randf()),
					true if randf() > 0.5 else false)
		4:
			DebugGeometry.draw_debug_arrow(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					Vector3(randf() * 2 - 1, randf() * 2 - 1, randf() * 2 - 1).normalized(),
					randf() * 3,
					Color(randf(), randf(), randf()),
					true if randf() > 0.5 else false)
		5:
			DebugGeometry.draw_debug_coordinate_system(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					Vector3(randf() * 2 - 1, randf() * 2 - 1, randf() * 2 - 1).normalized(),
					Vector3(randf() * 2 - 1, randf() * 2 - 1, randf() * 2 - 1).normalized(),
					randf() * 2, randf(),
					true if randf() > 0.5 else false)
		6:
			DebugGeometry.draw_debug_grid(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					randf() * 5, randf() * 5, randi() % 5, randi() % 5,
					Vector3(randf() * 2 - 1, randf() * 2 - 1, randf() * 2 - 1).normalized(),
					Vector3(randf() * 2 - 1, randf() * 2 - 1, randf() * 2 - 1).normalized(),
					Color(randf(), randf(), randf()))
		7:
			DebugGeometry.draw_debug_line(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					randf(),
					Color(randf(), randf(), randf()))
		8:
			DebugGeometry.draw_debug_point(
					random_time,
					Vector3(randf() * 10 - 5, randf() * 10 - 5, randf() * 10 - 5),
					randf(),
					Color(randf(), randf(), randf()))
"

[sub_resource type="GDScript" id="GDScript_8htyx"]
script/source = "extends Node3D


@onready var camera := $Node3D/Camera3D as Camera3D
@onready var helper := $Node3D as Node3D


func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventMouse:
		if event is InputEventMouseMotion:
			rotate_camera(event.relative)
		elif event is InputEventMouseButton:
			if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
				translate_camera(1.0)
			elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
				translate_camera(-1.0)


func rotate_camera(delta: Vector2) -> void:
	delta *= 0.001
	helper.rotate_object_local(Vector3.RIGHT, delta.y)
	rotate_y(delta.x)


func translate_camera(delta: float) -> void:
	camera.translate_object_local(Vector3(0, 0, delta))
"

[node name="Node3D" type="Node3D"]
script = SubResource("GDScript_u5hqw")

[node name="Node3D" type="Node3D" parent="."]
script = SubResource("GDScript_8htyx")

[node name="Node3D" type="Node3D" parent="Node3D"]

[node name="Camera3D" type="Camera3D" parent="Node3D/Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5)

[node name="Label" type="Label" parent="."]
offset_right = 40.0
offset_bottom = 23.0
text = "
    Press Space to add random shapes"
